name: CI

on:
  push:
    branches: [ main, master, 'jf-*' ]
  pull_request:
    branches: [ main, master ]

env:
  GO_VERSION: '1.23'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    - name: Check formatting
      run: |
        unformatted=$(gofmt -l .)
        if [ -n "$unformatted" ]; then
          echo "The following files need formatting:"
          echo "$unformatted"
          echo "Run 'gofmt -w .' to format them."
          exit 1
        fi
    - name: Run go vet
      run: go vet ./...
    - name: Check go.mod tidy
      run: |
        go mod tidy
        git diff --exit-code go.mod go.sum

  test:
    name: Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y tmux
        pip install --user tmuxp
    
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install tmux
        # Use pipx to install tmuxp in an isolated environment
        brew install pipx
        pipx install tmuxp
    
    - name: Run tests with race detector
      run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
    
    - name: Upload coverage
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.txt
        flags: unittests
        fail_ci_if_error: false

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    
    - name: Get version info
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=$(git describe --tags --always --dirty)
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        echo "date=$(date -u +%Y-%m-%d)" >> $GITHUB_OUTPUT
    
    - name: Build binaries
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        COMMIT="${{ steps.version.outputs.commit }}"
        DATE="${{ steps.version.outputs.date }}"
        
        LDFLAGS="-X github.com/jfox85/devx/version.Version=$VERSION"
        LDFLAGS="$LDFLAGS -X github.com/jfox85/devx/version.GitCommit=$COMMIT"
        LDFLAGS="$LDFLAGS -X github.com/jfox85/devx/version.BuildDate=$DATE"
        
        # Build for multiple platforms
        for OS in linux darwin windows; do
          for ARCH in amd64 arm64; do
            # Skip Windows ARM64
            if [ "$OS" = "windows" ] && [ "$ARCH" = "arm64" ]; then
              continue
            fi
            
            output="devx-${OS}-${ARCH}"
            if [ "$OS" = "windows" ]; then
              output="${output}.exe"
            fi
            
            echo "Building $output..."
            GOOS=$OS GOARCH=$ARCH go build -ldflags "$LDFLAGS" -o "dist/$output"
          done
        done
        
        # List built binaries
        ls -la dist/
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries
        path: dist/*
        retention-days: 7